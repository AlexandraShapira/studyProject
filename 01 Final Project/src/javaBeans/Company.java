/**
 * This class was designed as JavaBean for companies' records.
 * @author Alexandra Shapira
 */

package javaBeans;

import java.util.HashSet;
import java.util.Set;
import java.util.UUID;

public class Company {

	private String id;
	private String compName;
	private String password;
	private String email;
	private Set<Coupon> couponsOfCompany = new HashSet<Coupon>();
	private boolean isActive = true;

	/**
	 * The class constructor that is used for creating a new company. It sets
	 * the unique id and isActive parameter as true (by default). Although the
	 * task includes an ID parameter of the long type it was decided to use the
	 * String type for this parameter in order to simplify getting the unique
	 * value.
	 * 
	 * @param compName
	 *            Company name
	 * @param password
	 *            password that the Company will use to access the application
	 * @param email
	 *            Company's email
	 */

	public Company(String compName, String password, String email) {
		this.id = UUID.randomUUID().toString();
		this.compName = compName;
		this.password = password;
		this.email = email;
	}

	/**
	 * The class constructor that is used to creating a new Company object from
	 * the database record, therefore includes all Company's parameters.
	 * 
	 * @param id
	 *            Company id
	 * @param compName
	 *            Company name
	 * @param password
	 *            password that the Company will use to access the application
	 * @param email
	 *            Company's email
	 * @param couponsOfCompany
	 *            the set of active coupons released by the Company
	 * @param isActive
	 *            the state of the Company
	 */

	public Company(String id, String compName, String password, String email, Set<Coupon> couponsOfCompany,
			boolean isActive) {
		this.id = id;
		this.compName = compName;
		this.password = password;
		this.email = email;
		this.couponsOfCompany = couponsOfCompany;
		this.isActive = isActive;
	}

	/**
	 * This constructor creates a Company object with a unique id and empty
	 * attributes.
	 */

	public Company() {
		this.id = UUID.randomUUID().toString();
		this.compName = "";
		this.password = "";
		this.email = "";
	}

	/**
	 * The method gets the Company's id.
	 * 
	 * @return Company's id
	 */

	public String getId() {
		return id;
	}

	/**
	 * The method sets the id attribute.
	 * 
	 * @param id
	 *            Company's id
	 */

	public void setId(String id) {
		this.id = id;
	}

	/**
	 * The method gets the Company's name.
	 * 
	 * @return Company's name
	 */

	public String getCompName() {
		return compName;
	}

	/**
	 * The method sets the Company's name.
	 * 
	 * @param compName
	 *            Company's name
	 */

	public void setCompName(String compName) {
		this.compName = compName;
	}

	/**
	 * The method gets the Company's password.
	 * 
	 * @return Company's password
	 */

	public String getPassword() {
		return password;
	}

	/**
	 * The method sets the Company's password.
	 * 
	 * @param password
	 *            Company's password
	 */

	public void setPassword(String password) {
		this.password = password;
	}

	/**
	 * The method gets the Company's email.
	 * 
	 * @return Company's email
	 */

	public String getEmail() {
		return email;
	}

	/**
	 * The method sets the Company's email.
	 * 
	 * @param email
	 *            Company's email
	 */

	public void setEmail(String email) {
		this.email = email;
	}

	/**
	 * The method gets the Company's coupons.
	 * 
	 * @return Set of Coupons
	 */

	public Set<Coupon> getCouponsOfCompany() {
		return couponsOfCompany;
	}

	/**
	 * The method sets the Company's coupons.
	 * 
	 * @param couponsOfCompany
	 */

	public void setCouponsOfCompany(Set<Coupon> couponsOfCompany) {
		this.couponsOfCompany = couponsOfCompany;
	}

	/**
	 * The method gets the Company's state.
	 * 
	 * @return if company is active
	 */

	public boolean isActive() {
		return isActive;
	}

	/**
	 * The method sets the Company's state.
	 * 
	 * @param isActive
	 *            if Company is active
	 */

	public void setActive(boolean isActive) {
		this.isActive = isActive;
	}

	/**
	 * The method returns a string with all Company's parameters
	 */

	@Override
	public String toString() {
		return "Company: " + "\n" + "ID: " + id + "\n" + "Company Name: " + compName + "\n" + "Password: " + password
				+ "\n" + "Email: " + email + "\n" + "Coupons: " + couponsOfCompany + "\n" + "Is Active: " + isActive;
	}

	/**
	 * The autogenerated method that returns a hash code value for the object.
	 */

	@Override
	public int hashCode() {
		final int prime = 31;
		int result = 1;
		result = prime * result + ((compName == null) ? 0 : compName.hashCode());
		result = prime * result + ((id == null) ? 0 : id.hashCode());
		return result;
	}

	/**
	 * The method that indicates whether some other object is equal to this one.
	 */

	@Override
	public boolean equals(Object otherObject) {

		if (otherObject == null) {
			return false;
		}

		if (this == otherObject) {
			return true;
		}

		if (!(otherObject instanceof Company)) {
			return false;
		}

		Company otherCompany = (Company) otherObject;

		return (otherCompany.getId() == this.id && otherCompany.getCompName().equals(this.compName));
	}

}
